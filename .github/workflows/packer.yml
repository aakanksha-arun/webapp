name: Packer Build

on:
  pull_request:
    types:
      - closed
jobs:
  build-packer:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
    - name: Check out repository code
      uses: actions/checkout@v4
    - name: Node.js setup
      uses: actions/setup-node@v2
      with:
        node-version: '14.x'
    - uses: ikalnytskyi/action-setup-postgres@v5
      with:
        username: ${{ secrets.PSQL_DB_USER }}
        password: ${{ secrets.PSQL_DB_PASS }}
        database: mydb
        port: 5432
      id: postgres
    - name: Creating .env file
      run: |
          cat << EOF > ./.env
          ${{ secrets.ENV_VARS }}
          ${{ secrets.ENVIRONMENT }}
          EOF  
    - name: Zipping repo
      run: | 
        rm -rf webapp.zip
        zip -r webapp.zip . -x ".git/*" ".github/*" 
    - name: Install dependencies
      run: npm install
    - name: Run tests
      run: npx jest
      env:
        PSQL_DB_USER: ${{ secrets.PSQL_DB_USER }}
        PSQL_DB_PASS: ${{ secrets.PSQL_DB_PASS }}
        PSQL_DB: mydb
        POSTGRES_HOST: localhost
        PORT: 8080
        ENVIRONMENT: TEST
    - name: Cloud Auth
      id: auth
      uses: google-github-actions/auth@v2
      with:
        credentials_json: '${{ secrets.SA_KEY}}'
    - name: Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
    - name: gcloud CLI
      run: gcloud info
    - name: Packer Initialization
      id: init
      if: success()
      run: packer init image.pkr.hcl
    - name: Format packer
      id: fmt
      if: success()
      run: packer fmt image.pkr.hcl
    - name: Validate Packer
      if: success()
      #add db/packer vars here
      run: packer validate image.pkr.hcl
    - name: Build Packer
      if: success()
      run: |
        packer build image.pkr.hcl | tee build_output.txt
        echo $(cat build_output.txt | grep 'project: csye6225-*' | cut -d ' ' -f 12) > imagename.txt
      
    - name: Setting Variables for Template
      run: |
        echo "db_host=$(echo $(gcloud secrets versions access latest --secret='secret-host'))" >> $GITHUB_ENV
        echo "db_pass=$(echo $(gcloud secrets versions access latest --secret='secret-pass'))" >> $GITHUB_ENV
        echo "disk_kms=$(echo $(gcloud secrets versions access latest --secret='secret-kms-key'))" >> $GITHUB_ENV

        echo "image_name=$(cat imagename.txt)" >> $GITHUB_ENV
        echo "template_name=centos-vm-template-$(date +%Y%m%d%H%M)" >> $GITHUB_ENV

    - name: Echo Names
      run: |
        echo $template_name
        echo $image_name

    - name: New VM Template
      run: |
        gcloud compute instance-templates create $template_name \
          --instance-template-region=${{ secrets.REGION }}  \
          --region=${{ secrets.REGION }} \
          --machine-type=${{secrets.MACHINE_TYPE}} \
          --image=$image_name \
          --subnet=${{secrets.SUBNET}} \
          --service-account=${{ secrets.VM_SA }} \
          --scopes=${{secrets.SA_SCOPE}} \
          --metadata=db-user=${{secrets.DB_USER}},db-name=${{secrets.DB_NAME}},db-host=$db_host,db-pass=$db_pass,startup-script="${{ secrets.STARTUP_SCRIPT }}" \
          --boot-disk-type=${{secrets.DISK_TYPE}} \
          --boot-disk-kms-key=$disk_kms

    - name: Setup MIG with new Template
      run: | 
        gcloud compute instance-groups managed set-instance-template ${{secrets.MIG_NAME}} \
        --template=projects/${{ secrets.GCP_DEV_PROJECT }}/regions/${{ secrets.REGION }}/instanceTemplates/$template_name \
        --region=${{ secrets.REGION }}

    - name: Roll out updates
      run: |
        gcloud compute instance-groups managed rolling-action start-update ${{secrets.MIG_NAME}} \
        --version template=projects/${{ secrets.GCP_DEV_PROJECT}}/regions/${{ secrets.REGION }}/instanceTemplates/$template_name \
        --region=${{ secrets.REGION }} \
        --type=${{ secrets.ROLLING_TYPE }} \
        --max-surge=3 \
        --max-unavailable=0    

    - name: Wait for Refresh
      run: |
        gcloud compute instance-groups managed wait-until ${{secrets.MIG_NAME }} \
        --version-target-reached \
        --region=${{ secrets.REGION }}

    - name: Completion Status
      run: echo "DONE!"    

